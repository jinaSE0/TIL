 1. useState 복습

(1) 정의

useState는 가장 기본적인 hook이며, 함수 컴포넌트에서 가변적인 상태를 가지게 해줍니다.

useState의 기본적인 형태는 아래 처럼 생겼습니다. 

```jsx
const [state, setState] = useState(initialState);
```
원래는 useState 라는 함수가 배열을 반환하고, 이것을 구조 분해 문법으로 꺼내놓은 모습일 뿐입니다. 
우리는 `state`를 변수로 사용했고, `setState`를 이용해서 `state` 값을 수정할 수 있었습니다.
그리고 만약 state가 원시 데이터타입이 아닌 객체 데이터 타입인 경우에는 불변성을 유지해줘야 한다고 이미 배웠습니다.**

 2. 함수형 업데이트

(1) 함수형 업데이트란?
    
    ```jsx
    // 기존에 우리가 사용하던 방식
    setState(number + 1);
    
    // 함수형 업데이트 
    setState(() => {});
    ```
    
    위 코드와 같이 setState의 `( ) 안에` 수정할 값이 아니라, 함수를 넣을 수 있습니다. 
    그리고 그 함수의 인자에서는 현재의 state을 가져올 수 있고, { } 안에서는 이 값을 변경하는 코드를 작성할 수 있습니다.
    
    ```jsx
    // 현재 number의 값을 가져와서 그 값에 +1을 더하여 반환한 것 입니다.
    setState((currentNumber)=>{ return currentNumber + 1 });
    ```
    
- **(2) 두 방식의 차이점은?**
    
     **일반 사용법과 함수형 업데이트 방식의 차이점**이 무엇일까요? 두개의 코드를 비교해봅시다. 
    
    먼저 일반 업데이트 방식으로 onClick안에서 `setNumber(number + 1)` 를 3번 호출했습니다. **number가 1씩 증가하는군요.**
    
    ```jsx
    // src/App.js
    
    import { useState } from "react";
    
    const App = () => {
      const [number, setNumber] = useState(0);
      return (
        <div>
    			{/* 버튼을 누르면 1씩 플러스된다. */}
          <div>{number}</div> 
          <button
            onClick={() => {
              setNumber(number + 1); // 첫번째 줄 
              setNumber(number + 1); // 두번쨰 줄
              setNumber(number + 1); // 세번째 줄
            }}
          >
            버튼
          </button>
        </div>
      );
    }
    
    export default App;
    ```
    
    이번에는 함수형 업데이트 방식으로 동일하게 작동시켜보겠습니다. **number가 3씩 증가하네요.**
    
    ```jsx
    // src/App.js
    
    import { useState } from "react";
    
    const App = () => {
      const [number, setNumber] = useState(0);
      return (
        <div>
    			{/* 버튼을 누르면 3씩 플러스 된다. */}
          <div>{number}</div>
          <button
            onClick={() => {
              setNumber((previousState) => previousState + 1);
              setNumber((previousState) => previousState + 1);
              setNumber((previousState) => previousState + 1);
            }}
          >
            버튼
          </button>
        </div>
      );
    }
    
    export default App;
    ```
    
왜  다르게 동작할까요?
    
일반 업데이트 방식은 버튼을 클릭했을 때 첫번째 줄 ~ 세번째 줄의 있는 setNumber가 각각 실행되는 것이 아니라, 배치(batch)로 처리합니다.
즉 우리가 onClick을 했을 때 setNumber 라는 명령을 세번 내리지만, 리액트는 그 명령을 하나로 모아 최종적으로 한번만 실행을 시킵니다.
그래서 setNumber을 3번 명령하던, 100번 명령하던 1번만 실행됩니다. 
    
반면에 **함수형 업데이트 방식**은 **3번을 동시에 명령을 내리면, 그 명령을 모아 순차적으로 각각 1번씩 실행**시킵니다. 
0에 1더하고, 그 다음 1에 1을 더하고, 2에 1을 더해서 3이라는 결과가 우리 눈에 보이는 것
