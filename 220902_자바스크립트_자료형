자료형

1. 따옴표

따옴표는 세 종류가 있습니다.

큰따옴표: "Hello"
작은따옴표: 'Hello'
역 따옴표(백틱, backtick): `Hello`
큰따옴표와 작은따옴표는 ‘기본적인’ 따옴표로, 자바스크립트에서는 이 둘에 차이를 두지 않습니다.

역 따옴표로 '변수나 표현식'을 감싼 후 ${…}안에 넣어주면, 아래와 같이 원하는 변수나 표현식을 문자열 중간에 손쉽게 넣을 수 있습니다.

let name = "John";

// 변수를 문자열 중간에 삽입
alert( `Hello, ${name}!` ); // Hello, John!

// 표현식을 문자열 중간에 삽입
alert( `the result is ${1 + 2}` ); // the result is 3
${…} 안에는 name 같은 변수나 1 + 2 같은 수학 관련 표현식을 넣을 수 있습니다. 
물론 더 복잡한 표현식도 넣을 수 있죠. 무엇이든 들어갈 수 있습니다. 이렇게 문자열 중간에 들어간 변수나 표현식은 평가가 끝난 후 문자열의 일부가 됩니다.

'큰따옴표나 작은따옴표를 사용하면 중간에 표현식을 넣을 수 없다'는 점에 주의하시기 바랍니다. 이 방법은 역 따옴표를 써야만 가능합니다.

alert( "the result is ${1 + 2}" ); // the result is ${1 + 2}

2. 불린형
불린값은 비교 결과를 저장할 때도 사용됩니다.

let isGreater = 4 > 1;

alert( isGreater ); // true (비교 결과: "yes")

3. null
자바스크립트의 null은 자바스크립트 이외 언어의 null과 성격이 다릅니다.
다른 언어에선 null을 '존재하지 않는 객체에 대한 참조’나 '널 포인터(null pointer)'를 나타낼 때 사용합니다.
하지만 자바스크립트에선 null을 ‘존재하지 않는(nothing)’ 값, ‘비어 있는(empty)’ 값, ‘알 수 없는(unknown)’ 값을 나타내는 데 사용합니다.
let age = null;은 나이(age)를 알 수 없거나 그 값이 비어있음을 보여줍니다.
<-> undefined는 변수는 선언했지만 값을 할당하지 않은 상태

4.typeof 연산자
typeof 연산자는 인수의 자료형을 반환합니다. 
자료형에 따라 처리 방식을 다르게 하고 싶거나 변수의 자료형을 빠르게 알아내고자 할 때 유용합니다.

typeof 연산자는 두 가지 형태의 문법을 지원합니다.

연산자: typeof x
함수: typeof(x)
괄호가 있든 없든 결과가 동일합니다.

typeof x를 호출하면 인수의 자료형을 나타내는 문자열을 반환합니다.

typeof undefined // "undefined"

typeof 0 // "number"

typeof 10n // "bigint"

typeof true // "boolean"

typeof "foo" // "string"

typeof Symbol("id") // "symbol"

typeof Math // "object"  (1)

typeof null // "object"  (2)

typeof alert // "function"  (3)
마지막 세 줄은 약간의 설명이 필요해 보이네요.

Math는 수학 연산을 제공하는 내장 객체이므로 "object"가 출력됩니다. 
Math에 대해선 숫자형 챕터에서 학습하도록 하겠습니다. 
내장 객체는 객체형이라는 것을 알려주기 위해 이런 예시를 작성해 보았습니다.
typeof null의 결과는 "object"입니다. null은 별도의 고유한 자료형을 가지는 특수 값으로 객체가 아니지만,
하위 호환성을 유지하기 위해 이런 오류를 수정하지 않고 남겨둔 상황입니다.
언어 자체의 오류이므로 null이 객체가 아님에 유의하시기 바랍니다.
typeof는 피연산자가 함수면 "function"을 반환합니다. 
그러므로 typeof alert는 "function"을 출력해줍니다. 그런데 '함수’형은 따로 없습니다.
함수는 객체형에 속합니다. 이런 동작 방식이 형식적으론 잘못되긴 했지만, 
아주 오래전에 만들어진 규칙이었기 때문에 하위 호환성 유지를 위해 남겨진 상태입니다. 
한편, 실무에선 이런 특징이 매우 유용하게 사용되기도 합니다.


https://ko.javascript.info/types


