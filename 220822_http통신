#####
axios를 이용하는데 뭔가 관련된 내용들이 깔끔하게 정리가 되지않고 알듯말듯한 느낌만 가진채 코드를 짰다.

아마 [http 통신에 대해 기본적인 내용도 전혀 모른다]는 점때문에 자꾸 관련된 글을 보거나 코드를 짜도 아리송한 느낌만 남는듯하다.
그래서 마구잡이로 블로그 글들을 읽고보니 http 통신을 공부하면 혼란한 머릿속이 어느정도 정리될 것같다는 결론에 도달했다.

 http 통신 요약
  1) http 요청의 구조
    - 스타트라인 : 메소드(클라이언트가 서버에 요청할 동작)/ 프로토콜(사용되는 프로토콜과 버전)
    - http headers : 클라이언트에 대한 자세한 정보
    - empty-line : 헤더와 본문을 구별함
    - body : 해당 요청 전송하는 메세지(데이터)
     
  2) http 응답의 구조
    - 스타트라인 : 프로토콜 (사용되는 프로토콜과 버전) 상태코드(요청에 대한 응답 상태) 상태메세지(상태코드와 함께 전달되는 메세지)
    - http headers : 
    - empty-line : 헤더와 본문을 구별함
    - body : 데이터
    
  3) http 메소드
    - GET : 특정 리소스를 가져오도록, CRUD의 개념으로 생각하면 Read에 속한다. 
      URL 뒤에 데이터를 붙여 보낸다. www.example.com/upper

    - POST : 서버로 리소스를 제출하는 메서드로 서버 상태의 변화를 일으킨다. 
             주로 '새로운' 리소스 생성(create) 할 때 사용된다.
             URL에 붙여 쓰는 방식이 아닌 BODY에다 리소스를 넣어서 보낸다.
      
    - PUT : POST와 비슷하지만 연속적인 요청시에도 같은 효과를 가져온다. 기존 데이터를 '교체하는' 용도로 쓰인다.(update)
    - PATCH : 리소스의 부분적인 수정(update)을 할 때에 사용된다.
    - DELETE : 지정한 리소스를 삭제(delete) 요청할 때 사용한다.
    - OPTIONS : CORS에서 OPTIONS 메소드로 사전 요청을 보내 
      서버가 해당 parameters를 포함한 요청을 보내도 되는지에 대한 응답을 줄 수 있게 한다. 


느낀 점
확실히 http통신을 이해하고 나니 axios가 왜 그런 구조인지 알겠다.. 
axios의 공식문서가 불친절한 게 아니라 http 통신을 바탕으로 하기때문에 굳이 설명할 필요가 없는거였구나...?
axios 공식 문서 읽고 post와 get이 어떤 데이터 보내는지, response에는 어떤 내용이 들어가는지 내일 정리하기...

추가
https://www.youtube.com/watch?v=d6suykcsNeY
-> npm express와 포스트맨 사용하여 가짜서버 만들고 테스트하기
-> 프론트에서 서버에 데이터 요청하는 방법 (React로 fetch, axios 사용하기)

- CORS에러Cross-Origin Resource Sharing
프론트와 백엔드의 출처(Origin)가 달라서 발생하는 문제로 흔하게 발생함
-> 다음에 자세히 알아보고 포스팅하기


출처
https://velog.io/@bining/HTTP-%EB%A9%94%EC%84%B8%EC%A7%80-%EC%9A%94%EC%B2%ADrequest%EA%B3%BC-%EC%9D%91%EB%8B%B5response
#####

