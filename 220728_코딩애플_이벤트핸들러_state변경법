1. onClick 이벤트 핸들러 쓰는법
onClick = { 함수 }
-> 함수를 따로 만들거나 function(){}
-> 함수만드는 문법 바로 넣어도 됨;  
   onClick = { function(){} }
   onClick = { () => {} }
   
   
2. state 변경하는 법 -> 등호로 하는 거 아니야, 함수에 누가 등호를 쓰니..
   state 변경함수 활용
   onClick = { () => {state변경함수(새로운state)} }
   onClick = { () => {따봉변경('따봉+1')} }
   //변경함수의 이름을 따봉변경으로, 초기값의 이름을 따봉으로 한 경우 - 클릭 할때마다 +1이 되게 함
   
   
3. array, object 건드릴때는 원본을 보존하는 방식으로 코드를 짜자
   let [글제목, 글제목 변경] = useState(['남자코트 추천', '강남 우동맛집', '파이썬독학']); //*원본
  
  return(
   <button onClick={()=>{
   let copy = [...글제목]; //이렇게 리스트를 카피라는 변수에 복제해서 
   copy[0] = '여자코트 추천'; //변경을해줘서 *원본을 보존하자
   글제목변경(copy);
   }}> 글수정 </button>
   
   20번째 줄에 왜 [...]를 써야할까?
   1) 일단, state 함수는 기존 state == 신규 state의 경우 변경을 안해준다.
   2) array나 object를 담은 변수는 그 값 자체가 아니라 화살표만 저장된다.
   아래의 경우는 copy에 글제목의 주소만 똑같이 복제되는 것 
   -> 그래서 신규state의 내용을 바꿔도 기존 state와 바뀐게 없다고 인식한다.
  
   let copy = 글제목; 
   copy[0] = '여자코트 추천'; 
   글제목변경(copy);
   
   [...]을 쓰면 되는 이유? ...으로 원래 리스트의 []를 벗기고 []를 다시 씌워주세요 라는 뜻으로
   -> 완전히 독립적인 array사본이 되는 것
   
   결론 정리하면
   state가 array/object면 독립적 카피본을 만들어서 수정해야 함
  
