스파르타 리액트 기초반 2주차 강의 요약

가상돔
: 메모리위에서만 돌아가고 눈에는 안보임, 기존 돔과 가상돔에 새로 올라간 부분을 비교한 후 바뀐 부분만 변경함
사이트 구조에 따라 다르지만 가상돔을 쓰면 연산이 적어질져 빨라질 수 있음.

라이프 사이클
: 컴포넌트 보이게 된 순간부터 사라지기까지의 과정

------렌더 단계---------------    -----------커밋 단계--------------------------------
1. 생성 |constructor| -> |render| -> |react dom 및 refs 업데이트| -> |componentDid-Mount*|
*componentDid-Mount() :
첫 랜더링 시, 리랜더링x
그래서 ajax나 AddEventListner 많이 함
가상돔이 실제 돔에 올라간 후에 하는 메서드이기때문에 DOM관련 메서드하면 좋음 (실제로 다 올라갔어 라는 뜻이니까) 


2. 업데이트    ***   ->   |render| -> |react dom 및 refs 업데이트| -> |componentDidUpdate|
사용자의 행동으로 데이터가 바뀌거나 부모컴포넌트가 렌더링할 때 업데이트 됨

***의 네가지 경우
props (부모가 자식한테 주는 data) 바뀔때
state (컴포넌트 스스로 가지고있는 data) 바뀔때
부모컴포넌트가 업데이트 되었을때
또는 forceUpdate했을때


3. 제거할때                                                       -> |componentWidUnmount**|
**컴포넌트 사라지기 직전에

리액트 함수형 기본 생김새
const BucketList = (props) => { //부모한테 데이터 파라미터로 받아올거야
return null; // 돔으로 올라갈 리액트 요소
}

export default BucketList 또는 export {BucketList}

-> App.js에서 호출해야함
import해서 자식 불러줘야함


마진병합상쇄현상 / 여백상쇄현상
자식요소의 마진이 부모요소쪽으로 침범하는 경우
-> 부모요소의 display를 block이 아니게하면 됨 
-> flex나 inlineflex로 

styled component
()=>{중괄호는 반드시 retuen포함해야해}
()=>()
scss문법 사용가능 nesting을 활용하면 편함

팁 ) 폴더명은 소문자로 시작하고 js파일과 컴포넌트 이름은 CamelCase

+) 이걸 듣었다고해서 코드를 짤 수 없을거 같고 음 코드해석이나 하면 다행일 것같다.
