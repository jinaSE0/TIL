[옵셔널 체이닝이란]

일단 쉽게

- 옵셔널 체이닝
  왼쪽자료?.오른쪽자료
  왼쪽자료가 undefined나 null이면 undefined가 출력됨
  -> 궁극적 문제 해결이 아니라 감추는 것
  
- nullish coalescing 
  왼쪽자료??오른쪽자료
  왼쪽자료가 undefined나 null이면 오른쪽이 출력됨
  
  언제유용할까?
  <script>
  var user;
  console.log(user)
  </script>
  위와 같은 코드에서 유저 데이터가 조금 늦게 도착한다면
  undefined가 화면에 출력된다든지하는 문제가 생길 수 있음
  이럴때  console.log(user ?? '로딩중')과 같이 활용하면 됨
  
  추가)
  || 하고 ?? 차이를 알아 두면 더 좋다.
  간략히 얘기하면 전자는 0, "", false, undefined 같은 falsy 값을 전부 검사 하는 연산자고
  후자는 undefined 하고 null 같은 nullish 만 검사하는 연산자입니다.

  const a = false || "어떻게";
  // a => "어떻게"
  const b = false ?? "사람 이름이";
  // b => false
  const c = undefined ?? null ?? "엄",
  // c => "엄"
  
  
옵셔널 체이닝 더 자세하게
프로퍼티가 없는 중첩 객체를 에러 없이 안전하게 접근하기 위해 사용하는 것.

사용자가 여러명 있는데 그중 몇명은 주소 정보를 가지고 있지 않을때, 주소정보에 접근하면 타입에러가 발생.

자바스크립트를 사용해 페이지에 존재하지 않는 요소에 접근해서 요소의 정보를 가져오려고 하면 호출 결과가 null이여서 에러가 발생

[옵셔널 체이닝 문법 `?.`은 세 가지 형태로 사용할 수 있습니다.]

1. `obj?.prop` – `obj`가 존재하면 `obj.prop`을 반환하고, 그렇지 않으면 `undefined`를 반환함
2. `obj?.[prop]` – `obj`가 존재하면 `obj[prop]`을 반환하고, 그렇지 않으면 `undefined`를 반환함
3. `obj?.method()` – `obj`가 존재하면 `obj.method()`를 호출하고, 그렇지 않으면 `undefined`를 반환함

여러 예시를 통해 살펴보았듯이 옵셔널 체이닝 문법은 꽤 직관적이고 사용하기도 쉽습니다. 
`?.` 왼쪽 평가 대상이 `null`이나 `undefined`인지 확인하고 `null`이나 `undefined`가 아니라면 평가를 계속 진행합니다.

`?.`를 계속 연결해서 체인을 만들면 중첩 프로퍼티들에 안전하게 접근할 수 있습니다.

`?.`은 `?.`왼쪽 평가대상이 없어도 괜찮은 경우에만 선택적으로 사용해야 합니다.

꼭 있어야 하는 값인데 없는 경우에 `?.`을 사용하면 프로그래밍 에러를 쉽게 찾을 수 없으므로 이런 상황을 만들지 말도록 합시다.



출처 [https://ko.javascript.info/optional-chaining](https://ko.javascript.info/optional-chaining)

애플코딩
https://www.youtube.com/watch?v=WHUvtiKy_pg
